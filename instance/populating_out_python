import os
import sys
import csv
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError

# Add the path to the directory containing schema_for_admixtrue.py to the Python path
sys.path.append('/path/to/directory/containing/schema_for_admixtrue')

# Now you should be able to import the required modules
from schema_for_admixtrue import db, Admixture_k3, Admixture_k5

# Initialize Flask application
app = Flask(__name__)

# Set the path for the root of the project
project_root = os.path.abspath(os.path.dirname(__file__))

# Set the absolute path to the database file
database_path = os.path.join(project_root, 'instance', 'ArchGenome.db')

# Ensure the instance directory exists
if not os.path.exists(os.path.dirname(database_path)):
    try:
        os.makedirs(os.path.dirname(database_path))
    except Exception as e:
        print(f"Failed to create the instance directory: {e}")
        sys.exit(1)  # Exit if cannot create the directory

# Set the full URI for the database connection
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{database_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize the database with the Flask app
db.init_app(app)

# Function to populate admixture data
def populate_admixture(model, tsv_path):
    with app.app_context():
        # Create tables if they don't exist
        db.create_all()
        
        try:
            # Clear previous data
            num_deleted = db.session.query(model).delete()
            db.session.commit()
            print(f"Cleared {num_deleted} existing records from {model.__name__}.")
        except SQLAlchemyError as e:
            db.session.rollback()
            print(f"Error clearing data from {model.__name__}: {e}")
            return
        
        # Populate new data
        try:
            with open(tsv_path, 'r') as file:
                reader = csv.DictReader(file, delimiter='\t')
                for row in reader:
                    try:
                        record = model(**row)
                        db.session.add(record)
                    except Exception as e:
                        db.session.rollback()
                        print(f"Failed to add record {row}: {e}")
                        continue

            db.session.commit()
            print(f"Inserted records into {model.__name__} successfully.")
        except FileNotFoundError as e:
            print(f"TSV file not found: {e}")
        except SQLAlchemyError as e:
            db.session.rollback()
            print(f"Failed to commit records to {model.__name__}: {e}")
        except Exception as e:
            print(f"Error during data insertion: {e}")

        # Verify data insertion
        try:
            record_count = db.session.query(model).count()
            print(f"{record_count} records present in {model.__name__} after insertion.")
        except SQLAlchemyError as e:
            print(f"Error counting records in {model.__name__}: {e}")

if __name__ == '__main__':
    # Direct paths to where your TSV files are located
    k3_tsv_path = '/Users/farzadhamzawe/group_project bioinformatics/Software-Development-Project/Flask_Project/src/tables/admixture_results/admixture_k3.tsv'
    k5_tsv_path = '/Users/farzadhamzawe/group_project bioinformatics/Software-Development-Project/Flask_Project/src/tables/admixture_results/admixture_k5.tsv'

    # Populate the database
    populate_admixture(Admixture_k3, k3_tsv_path)
    populate_admixture(Admixture_k5, k5_tsv_path)
